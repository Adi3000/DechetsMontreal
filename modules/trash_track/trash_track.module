<?php
/**
 *   Drupal Module for retrieving & parsing trash and recycling schedules
 *   for Montreal (as used by www.dechetsmontreal.ca).
 *
 *   © 2010 Kent Mewhort. This module is distributed under the terms of the
 *   GNU General Public License Version 3 <http://www.gnu.org/licenses/gpl.html>.
 *
 **/

/**
 * Implementation of hook_menu().
 */
function trash_track_menu() {
  // schedule lookup
  $items['lookup'] = array(
  	 'title' => 'Lookup',
  	 'page callback' => 'drupal_get_form',
  	 'page arguments' => array('trash_track_lookup_form'),
  	 'access arguments' => array('access content'),
  	 'type' => MENU_CALLBACK,
  );
  // JSON schedule lookup
  $items['json'] = array(
  	 'title' => 'Lookup',
  	 'page callback' => 'track_track_lookup_json',
  	 'access arguments' => array('access content'),
  	 'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of node_operations().
 */
function trash_track_node_operations() {
  $operations = array(
    'track_track_retrieve' => array(
      'label' => t('Trash: Retrieve raw schedule'),
      'callback' => 'trash_track_bulk_retrieve_schedule'),
    'track_track_parse' => array(
      'label' => t('Trash: Parse raw schedule'),
      'callback' => 'trash_track_bulk_parse_schedule'),
    );
  return $operations;
}

// primary form to lookup trash by address
function trash_track_lookup_form() {
	global $language;
	$lang = $language->language;
	
	// if the browser is a mobile phone, redirect to the mobile form page
	$browserInfo = browscap_get_browser();
	if($browserInfo['ismobiledevice']){
		$url = url(drupal_get_path('module', 'trash_track') . "/mobile/index_$lang.html",
			array('absolute' => TRUE, 'language' => ''));
		drupal_goto($url);
	}
	
	$form['address'] = array(
    	'#type' => 'textfield',
    	'#title' => t("Address or postal code"),
		'#default_value' => '',
    	'#required' => TRUE,
  		);
  		
  	// check the session variable for a previously entered address (to maintain
  	// as the default)
  	if($_SESSION['trash_track_address']) {
  		$form['address']['#default_value'] = $_SESSION['trash_track_address'];
  	}
  	  
  	$form['postalcode'] = array(
    	'#type' => 'hidden',
		'#value' => '',
  		);
  		
   $form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Lookup'),
  	);
  	return $form;
}

// check validity of address or postal code (if an address is given, lookup
// the postal code from Google Geocoder API)
function trash_track_lookup_form_validate($form, &$form_state) {
	$form_state['values']['postalcode'] = '';
	$returnVal = trash_track_address_to_postal_code($_POST['address'], $form_state['values']);
	if($returnVal){
	    form_set_error('address', $returnVal);
	}
}

// redirect to the schedule, creating it if necessary
function trash_track_lookup_form_submit($form, &$form_state) {
	// store the address to the session variable to propagate this info
	// through the page redirect
  	$_SESSION['trash_track_address'] = $form_state['values']['address'];
  	
  	// get the schedule nid
  	$scheduleNid = trash_track_get_schedule($form_state['values']['postalcode']);
  	
	// redirect to the schedule
	$form_state['redirect'] = 'schedules/'. $form_state['values']['postalcode'];
}

// Return a schedule in JSON format
function track_track_lookup_json(){
	$address = $_GET['address'];
	$startDate = $_GET['start'];
	$endDate = $_GET['end'];
	
	$json = array();
	$json['status'] = 'SUCCESS';
	
	// input address -> formatted address / postal code
	$returnVal = trash_track_address_to_postal_code($address, $formattedAddress);
	if($returnVal){
		$json['status'] = $returnVal;
	}
	else{
		$json = array_merge($json, $formattedAddress);
		
		// get the schedule
		$nid = trash_track_get_schedule($formattedAddress['postalcode']);
		$scheduleNode = node_load($nid, null, true);
		
		// get each collection
		foreach($scheduleNode->field_collection_refs as $collectionNid){
			$collectionNode = node_load($collectionNid['nid'], null, true);
			$collectionInfo = array();
			$collectionInfo['type'] = $collectionNode->field_collection_type_nice[0]['value'];
			$collectionInfo['icon'] = 'icon_' . $collectionNode->field_collection_type[0]['value'] . '_sm.png';
			$collectionInfo['desc'] = $collectionNode->body;
			
			$dates = array();
			foreach($collectionNode->field_collection_dates as $date){
				if((!empty($startDate) && strtotime($date['value']) >= $startDate) &&
					(!empty($endDate) && strtotime($date['value']) <= $endDate)){
					$collectionInfo['dates'][] = $date;
				}
			}
			
			
			$json['collections'][] = $collectionInfo;
		}
	}
	header("Content-type: application/json");
	echo json_encode($json);
}

// Validates an input address and uses the Google Geocoder API to convert an input address
// to a formatted address (array of address, postalcode, lat, long).
// Returns 0 upon success or an error code upon failure.
function trash_track_address_to_postal_code($input_address,  &$formatted_address){
	$formatted_address['postalcode'] = '';
	
	// if the input is not a postal code, lookup from Google Geocoder API
	$isPostalCode = /* Always lookup to get lat/lon 
		preg_match('/\A(\w\d\w)\s*(\d\w\d)\Z/',
		trim(), $matches); */
		false;

	if(!$isPostalCode) {
		// execute the Google Geocoder request
		$addressInfo = null;
		$geoData = file_get_contents(
			'http://maps.google.com/maps/api/geocode/json?address=' .
			urlencode($input_address) .
			'&sensor=false');
		if(!$geoData || $geoData == '' ||
		   !($addressInfo = json_decode($geoData)) ||
		   $addressInfo->status != 'OK') {
			return t("Unable to locate address. Please try entering your postal code instead.");	
		}

		// for each address match
		foreach($addressInfo->results as $addressInfo){
			
			$postalCode = null;
			$inQuebec = false;
			
			// for each address component
			foreach($addressInfo->address_components as $addressComponent){
				// grab any postal code
				if(in_array('postal_code', $addressComponent->types)){
					$postalCode = $addressComponent->short_name;
				}
				
				// if the address is in quebec, use it
				if($addressComponent->short_name == 'QC' &&
				   in_array('administrative_area_level_1', $addressComponent->types)){
				   	$inQuebec = true;
				}
			}
			
			// break if we've found a postal code in Quebec
			if($inQuebec && $postalCode){
				$formatted_address['address'] = $addressInfo->formatted_address;
				$formatted_address['postalcode'] =
					strtoupper(preg_replace('/\s/', '', $postalCode));
				$formatted_address['geometry'] = $addressInfo->geometry;
				break;
			}
		}

		if(empty($formatted_address['postalcode'])){
			return t("Unable to locate address. Please try entering your postal code instead.");	
		}
	}
	else {
		$formatted_address['postalcode'] = strtoupper($matches[1] . $matches[2]);
	}
	
	// check whether the postal code is in montreal (this is a general area check -> just
	// verify that it starts with a H)
	if(substr($formatted_address['postalcode'], 0, 1) != 'H'){
		return t("Address must be within Montreal.");
	}
	return 0;
}

  	
// get the schedule nid corresponding to a postal code, creating the schedule node if it
// does not already exist
function trash_track_get_schedule($postal_code){
	global $language;
	$lang = $language->language;
	
	$scheduleNid = null;
	$node = null;
	
	// check whether a schedule for this postal code and language exists
	lock_acquire('trash_track_schedule_exists_check');
	$result = db_query("SELECT nid, status, changed FROM {node} WHERE type = 'trash_schedule' AND title = '%s' AND language = '$lang'",
		$postal_code);
	$row = db_fetch_array($result);
	
	// if the node exists, but is more than a month old, delete it so
	// the data is refreshed
	if($row['changed'] < (time()-30*24*3600)){
		node_delete($row['nid']);
		$row = null;
	}
	
	// create a schedule if none exists
	if($row){
		$scheduleNid = $row['nid'];
	}
	else {
		$node = (object) NULL;
		$node->type = 'trash_schedule';
		$node->title = $postal_code;
		$node->language = $lang;
		$node = node_submit($node);
		$node->uid = 1;
		$node->status = 0;
		node_save($node);
		$scheduleNid = $node->nid;
	}
	lock_release('trash_track_schedule_exists_check');
		
	// if the node is not new
	if(!$node){
		// if processing is not complete (by another parallel process),
		// simply wait for processing to complete
		if($row['status'] == 0 && ((time() - $row['changed']) <= 15)){
			for($i = 0; $i < 5; $i++){
				$node = node_load($row['nid'], false, true);
				if($node->status == 1)
					return $scheduleNid;
				sleep(1);
			}
		}
	}
	// else, retrieve and parse new schedules
	else {	
		trash_track_retrieve_schedule($node);
		trash_track_parse_schedule($node);
		$node->status = 1;
		node_save($node);	
		$scheduleNid = $node->nid;
	}
	return $scheduleNid;
}

function trash_track_bulk_retrieve_schedule($nids){
	foreach($nids as $nid){
		$node = node_load($nid, false, true);
		trash_track_retrieve_schedule($node);
		node_save($node);
	}	
}

// retrieve the raw trash schedule from the city website
function trash_track_retrieve_schedule(&$node){
	global $language;
	
	$postalCode = $node->title;
	if(!$postalCode || $postalCode == '')
		return;
		
	// open portal page for the appropriate language
	$cookieJar = null;
	$villeMontrealPageId = '3697,4150092';
	if($language->language == 'en'){
		$villeMontrealPageId = '3716,4153912';
	}
	trash_track_get_page("http://ville.montreal.qc.ca/portal/page?_pageid=$villeMontrealPageId&_dad=portal&_schema=PORTAL",
			$cookieJar);

	 // get the schedule (post the postal code and simulated mouse position)
	 $url = "http://ville.montreal.qc.ca/portal/page?_pageid=$villeMontrealPageId&_dad=portal&_schema=PORTAL"
	 	. '&ts=' . time();
	 $pageresult = trash_track_get_page(
	  	$url,
	 	$cookieJar,	
	 	array(
	 		'param1' => $postalCode,
	 		'submit.x' => rand(5,17),
	 		'submit.y' => rand(5,17))
	 	);
	 	
	 // if there's already a raw schedule file, delete it
	if($node->field_raw_data[0]) {
		$node->field_raw_data = array();
		node_save($node);
	 }
		 
	  // save the raw schedule as a file
	 $tempFile = file_directory_temp() . '/' .  $postalCode . "_$lang" . '.html';
	 $fh = fopen($tempFile, "w");
	 fwrite($fh, $pageresult);
	 fclose($fh);
   	 $node->field_raw_data[0] = field_file_save_file(
   		$tempFile, array(), file_directory_path());
}

function trash_track_bulk_parse_schedule($nids){
	foreach($nids as $nid){
		$node = node_load($nid, false, true);
		trash_track_parse_schedule($node);
		node_save($node);
	}	
}

// parse the raw trash schedule
function trash_track_parse_schedule(&$node){
	global $language;
	$lang = $language->language;
	
	// types of collection info
	$collectionTypes = array(
	 		'garbage' => array(
	 			'title_en' => 'Household waste',
	 			'title_fr' => 'Ordures ménagères',
	 			'pattern_en' => '/>Collection of household waste<.*?sansmarge\'>(.*?)<\/span>/is',
	 			'pattern_fr' => '/>Collecte des ordures ménagères<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		'recycling' => array(
	 			'title_en' => 'Recycling',
	 			'title_fr' => 'Matières recyclables',
	 			'pattern_en' => '/>Collection of recyclable material<.*?sansmarge\'>(.*?)<\/span>/is',
	 			'pattern_fr' => '/>Collecte des matières recyclables<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		'large' => array(
	 			'title_en' => 'Large Objects',
	 			'title_fr' => 'Objets volumineux',
	 			'pattern_en' => '/>Collection of large objects<.*?sansmarge\'>(.*?)<\/span>/is',
	 			'pattern_fr' => '/>Collecte des objets volumineux<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		'green' => array(
	 			'title_en' => 'Green waste',
	 			'title_fr' => 'Résidus verts',
	 			'pattern_en' => '/>Collection of green waste<.*?sansmarge\'>(.*?)<\/span>/is',
	 			'pattern_fr' => '/>Collecte de résidus verts<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		);

		// delete any existing collection nodes belonging to this schedule
		if($node->field_collection_refs){
			foreach($node->field_collection_refs as $collection){
				if($collection['nid']){
					node_delete($collection['nid']);
				}
			}
		}
		$node->field_collection_refs = array();
		
		// delete any existing collection nodes for this postal code
		$result = db_query("SELECT nid FROM {node} WHERE type = 'trash_collection' AND title = '%s' AND language = '$lang'",
			$node->title);
		while($row = db_fetch_array($result)) {
			node_delete($row['nid']);
		}
		
		// open the raw schedule
		$rawSchedule = file_get_contents($node->field_raw_data[0]['filepath']);
		
		// parse each collection type
	 	foreach($collectionTypes as $collectionType => $typeInfo){
	 		if(preg_match($typeInfo["pattern_$lang"], $rawSchedule, $matches)){
	 			// create a collection node
	 			$colNode = (object) NULL;
				$colNode->type = 'trash_collection';
				$colNode->title = $node->title;
				$colNode->body = utf8_encode($matches[1]);
				
				$colNode->field_collection_type[0]['value'] = $collectionType;
				$colNode->field_collection_type_nice[0]['value'] = utf8_encode($typeInfo["title_$lang"]);
				$colNode->field_collection_dates = trash_track_parse_dates($matches[1], $collectionType);
				
				$colNode = node_submit($colNode);
				$colNode->uid = 1;
				$colNode->language = $lang;
				node_save($colNode);
	 			
	 			$node->field_collection_refs[] = array('nid' => $colNode->nid);
	 		}
	 	}
}

// parse a single schedule collection message
function trash_track_parse_dates($text, $collectionType){
	global $language;
	$lang = $language->language;
	
	$months = array(
		'en' => array(
			'January',
			'February',
			'March',
			'April',
			'May',
			'June',
			'July',
			'August',
			'September',
			'October',
			'November',
			'December'),
		'fr' => array(
			'janvier',
			'février',
			'mars',
			'avril',
			'mai',
			'juin',
			'juillet',
			'août',
			'septembre',
			'octobre',
			'novembre',
			'décembre'));
	
	$iCalDateMapping = array(
		'en' => array(
			'SUNDAY' => 'SU',
			'MONDAY' => 'MO',
			'TUESDAY' => 'TU',
			'WEDNESDAY' => 'WE',
			'THURSDAY' => 'TH',
			'FRIDAY' => 'FR',
			'SATURDAY' => 'SA'),
		'fr' => array(
			'DIMANCHE' => 'SU',
			'LUNDI' => 'MO',
			'MARDI' => 'TU',
			'MERCREDI' => 'WE',
			'JEUDI' => 'TH',
			'VENDREDI' => 'FR',
			'SAMEDI' => 'SA'));
	$dates = array();
	
	// check if the text contains months -- if so, the schedule is only for the dates listed;
	// find each month, and all text up to the next semicolon or period
	foreach($months[$lang] as $i => $month){
		$regexp = "/(\d+\s((,\s)|(et\s)\d+)+\s*)$month/is";
		if($lang == 'en')
			$regexp = "/$month(.*?)[\;\.]/is";
		
		if(preg_match($regexp, $text, $matches)){
			// split tokens on spaces
			$tokens = preg_split('/[\s,]+/', $matches[1], -1, PREG_SPLIT_NO_EMPTY);
			if($tokens){
				foreach($tokens as $tok){
					// if the token's a number,  add it as a day of the month
					if(is_numeric($tok)){
						$datetimestamp = strtotime($months['en'][$i] . " $tok");
						$dates[] = array('value' => date('Y-m-d 00:00:00', $datetimestamp));
					}
					// only other valid token following a month is an 'and'
					else if($tok != 'and' && $tok != 'et'){
						break;
					}
				}
			}
		}  
	}
	
	// otherwise, schedule is for each day of the week listed
	if(empty($dates)){
		// get the collection days
		$days = array();
		foreach($iCalDateMapping[$lang] as $keyword => $iCalDay){
			if(preg_match('/' . $keyword . '/s', $text)){
				$days[] = $iCalDay;
			}
		}
		
		if(!empty($days)){
			// create dates from one month ago to one year from now
			$curTime = time();
			$start = date('Y-m-d', $curTime - (28 * 24 * 60 * 60)) . 'T00:00:00';
			$end = date('Y-m-d', $curTime + (365 * 24 * 60 * 60))  . 'T00:00:00';
			$endICal = date('Ymd', $curTime + (365 * 24 * 60 * 60)) . 'T000000Z';
			
			$iCalRule = 'FREQ=WEEKLY;UNTIL=' . $endICal .
				';WKST=MO;BYDAY=' . implode(',', $days);
			$exceptions = array();
			$rawDates = date_repeat_calc($iCalRule, $start, $end, $exceptions);
		
			// convert dates to cck format
			foreach($rawDates as $date){
				$dates[] = array(
					'value' => $date,
					'rrule' => $iCalRule);
			}
		}
	}
	return $dates;
}

// helper function to retrieve an external webpage using curl
function trash_track_get_page($url, &$cookieJar, $postData = null) {
	 // init curl
	 $ch = curl_init();
	 curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	 curl_setopt($ch, CURLOPT_TIMEOUT, 30);
	 curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	 curl_setopt($ch, CURLOPT_HEADER, 1);
	 curl_setopt($ch, CURLINFO_HEADER_OUT, true);
	 
	 // generate firefox headers so the site can properly detect
	 // this is a compatible browser
	 $header = array();
	 $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
	 $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
	 $header[] = "Cache-Control: max-age=0";
	 $header[] = "Connection: keep-alive";
	 $header[] = "Keep-Alive: 300";
	 $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
	 $header[] = "Pragma: ";
	 $browser = "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3";
	 curl_setopt($ch, CURLOPT_USERAGENT, $browser);
	 curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
	 
	 // create a cookie jar if one does not exist
	 if(!$cookieJar){
	 	$ckfile = tempnam (file_directory_temp(), "trash_track_curl_cookie");
	 	curl_setopt ($ch, CURLOPT_COOKIEJAR, $ckfile);
	 }
	 else {
	 	curl_setopt ($ch, CURLOPT_COOKIEFILE, $ckfile); 
	 }
	 
	 // set post data if provided
	 if($postData){
	 	// compile post data string
		$postStr = '';
		foreach($postData as $key => $val){
	 		$postStr .= $key . '=' . $val . '&';
	 	} 
	 	$postStr = rtrim($postStr, '&');
	 	
	 	curl_setopt($ch, CURLOPT_POST, 1);
	 	curl_setopt($ch, CURLOPT_POSTFIELDS, $postStr);	 	
	 }
	 
	 // retrieve page
	 curl_setopt($ch, CURLOPT_URL, $url);
	 $resultpage = curl_exec($ch);
	 
	 //print "Headers: " . curl_getinfo($ch, CURLINFO_HEADER_OUT);
	 //print "Result:" . $resultpage;
	 curl_close($ch);
	 
	 return $resultpage;
}
