<?php
/**
 *   Drupal Module for retrieving & parsing trash and recycling schedules
 *   for Montreal (as used by www.dechetsmontreal.ca).
 *
 *   Â© 2010 Kent Mewhort. Distributed under the terms of the GNU General
 *   Public License Version 3 <http://www.gnu.org/licenses/gpl.html>.
 *
 **/

/**
 * Implementation of hook_menu().
 */
function trash_track_menu() {
  // schedule lookup
  $items['lookup'] = array(
  	 'title' => 'Lookup',
  	 'page callback' => 'drupal_get_form',
  	 'page arguments' => array('trash_track_lookup_form'),
  	 'access arguments' => array('access content'),
  	 'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of node_operations().
 */
function trash_track_node_operations() {
  $operations = array(
  	 'track_track_retrieve' => array(
      'label' => t('Trash: Retrieve raw schedule'),
      'callback' => 'trash_track_bulk_retrieve_schedule'),
    'track_track_parse' => array(
      'label' => t('Trash: Parse raw schedule'),
      'callback' => 'trash_track_bulk_parse_schedule'),
    );
  return $operations;
}

// primary form to lookup trash by address
function trash_track_lookup_form() {
	$form['address'] = array(
    	'#type' => 'textfield',
    	'#title' => t("Address or postal code"),
		'#default_value' => '',
    	'#required' => TRUE,
  		);
  		
  	// check the session variable for a previously entered address (to maintain
  	// as the default)
  	if($_SESSION['trash_track_address']) {
  		$form['address']['#default_value'] = $_SESSION['trash_track_address'];
  	}
  	  
  	$form['postalcode'] = array(
    	'#type' => 'hidden',
		'#value' => '',
  		);
  		
   $form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Lookup'),
  	);
  	return $form;
}

// check validity of address or postal code (if an address is given, lookup
// the postal code from Google Geocoder API)
function trash_track_lookup_form_validate($form, &$form_state) {
	$form_state['values']['postalcode'] = '';
	
	// if the input is not a postal code, lookup from Google Geocoder API
	$isPostalCode = preg_match('/\A(\w\d\w)\s*(\d\w\d)\Z/',
		trim($_POST['address']), $matches);
	if(!$isPostalCode) {
		$form_state['values']['postalcode'] = '';
		
		// execute the Google Geocoder request
		$addressInfo = null;
		$geoData = file_get_contents(
			'http://maps.google.com/maps/api/geocode/json?address=' .
			urlencode($_POST['address']) .
			'&sensor=false');
		if(!$geoData || $geoData == '' ||
		   !($addressInfo = json_decode($geoData)) ||
		   $addressInfo->status != 'OK') {
			form_set_error('address', t("Unable to locate address. Please try entering your postal code instead."));	
			return;
		}

		// for each address match
		foreach($addressInfo->results as $addressInfo){
			
			$postalCode = null;
			$inQuebec = false;
			
			// for each address component
			foreach($addressInfo->address_components as $addressComponent){
				// grab any postal code
				if(in_array('postal_code', $addressComponent->types)){
					$postalCode = $addressComponent->short_name;
				}
				
				// if the address is in quebec, use it
				if($addressComponent->short_name == 'QC' &&
				   in_array('administrative_area_level_1', $addressComponent->types)){
				   	$inQuebec = true;
				}
			}
			
			// break if we've found a postal code in Quebec
			if($inQuebec && $postalCode){
				$form_state['values']['address'] = $addressInfo->formatted_address;
				$form_state['values']['postalcode'] =
					strtoupper(preg_replace('/\s/', '', $postalCode));
				break;
			}
		}

		if($form_state['values']['postalcode'] == ''){
			form_set_error('address', t("Unable to locate address. Please try entering your postal code instead."));	
			return;
		}
	}
	else {
		$form_state['values']['postalcode'] = strtoupper($matches[1] . $matches[2]);
	}
	
	// check whether the postal code is in montreal (this is a general area check -> just
	// verify that it starts with a H)
	if(substr($form_state['values']['postalcode'], 0, 1) != 'H'){
		form_set_error('address', t("Address must be within Montreal."));
	}
}

// redirect to the schedule, creating it if necessary
function trash_track_lookup_form_submit($form, &$form_state) {
	
	// set the address session variable to the value entered
  	$_SESSION['trash_track_address'] = $form_state['values']['address'];
  	
	// check whether a schedule for this postal code exists
	$result = db_query("SELECT nid, changed FROM {node} WHERE type = 'trash_schedule' AND title = '%s'",
		$form_state['values']['postalcode']);
		
	$scheduleNid = '';
	if($row = db_fetch_array($result)) {
		$scheduleNid = $row['nid'];
		
		// if the node was just created, check whether processing is complete
		// to guard against multiple clicks (and wait for completion if the node
		// is still being processed)
		if((time() - $row['changed']) <= 5){
			for($i = 0; $i < 5; $i++){
				$node = node_load($row['nid'], false, true);
				if(!empty($node->field_collection_refs) &&
					!empty($node->field_collection_refs[0]['nid'])){
					break;
				}
				sleep(1);
			}
		}
		
	}
	else{
		// if no schedule exists, create a new node for the schedule
		$node = (object) NULL;
		$node->type = 'trash_schedule';
		$node->title = $form_state['values']['postalcode'];
		$node = node_submit($node);
		$node->uid = 1;
		node_save($node);
		
		// retrieve and parse the schedule
		trash_track_retrieve_schedule($node);
		trash_track_parse_schedule($node);
		node_save($node);
		
		$scheduleNid = $node->nid;
	}
	
	// redirect to the schedule
	$form_state['redirect'] = 'schedules/'. $form_state['values']['postalcode'];
}

function trash_track_bulk_retrieve_schedule($nids){
	foreach($nids as $nid){
		$node = node_load($nid, false, true);
		trash_track_retrieve_schedule($node);
		node_save($node);
	}	
}

// retrieve the raw trash schedule from the city website
function trash_track_retrieve_schedule(&$node){
		$postalCode = $node->title;
		
		if(!$postalCode || $postalCode == '')
			continue;
		
	 	// open portal page
		$cookieJar = null;
		trash_track_get_page('http://ville.montreal.qc.ca/portal/page?_pageid=3716,4153912&_dad=portal&_schema=PORTAL',
	 		$cookieJar);

	 	// get the schedule (post the postal code and simulated mouse position)
	 	$url = 'http://ville.montreal.qc.ca/portal/page?_pageid=3716,4153912&_dad=portal&_schema=PORTAL'
	 		. '&ts=' . time();
	 	$pageresult = trash_track_get_page(
	   	$url,
	 		$cookieJar,	
	 		array(
	 			'param1' => $postalCode,
	 			'submit.x' => rand(5,17),
	 			'submit.y' => rand(5,17))
	 		);
	 	
	 	// if there's already a raw schedule file, delete it
		if($node->field_raw_data[0]) {
			$node->field_raw_data = array();
			node_save($node);
		 }
		 
	 	 // save the raw schedule as a file
		 $tempFile = file_directory_temp() . '/' .  $postalCode . '.html';
		 $fh = fopen($tempFile, "w");
		 fwrite($fh, $pageresult);
		 fclose($fh);
   	 $node->field_raw_data[0] = field_file_save_file(
   		$tempFile, array(), file_directory_path());
}

function trash_track_bulk_parse_schedule($nids){
	foreach($nids as $nid){
		$node = node_load($nid, false, true);
		trash_track_parse_schedule($node);
		node_save($node);
	}	
}

// parse the raw trash schedule
function trash_track_parse_schedule(&$node){
	
	// types of collection info
	$collectionTypes = array(
	 		'garbage' => array(
	 			'title_en' => 'Household waste',
	 			'pattern_en' => '/>Collection of household waste<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		'recycling' => array(
	 			'title_en' => 'Recycling',
	 			'pattern_en' => '/>Collection of recyclable material<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		'large' => array(
	 			'title_en' => 'Large Objects',
	 			'pattern_en' => '/>Collection of large objects<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		'green' => array(
	 			'title_en' => 'Green waste',
	 			'pattern_en' => '/>Collection of green waste<.*?sansmarge\'>(.*?)<\/span>/is'),
	 		);

		// delete any existing collection nodes belonging to this schedule
		if($node->field_collection_refs){
			foreach($node->field_collection_refs as $collection){
				if($collection['nid']){
					node_delete($collection['nid']);
				}
			}
		}
		$node->field_collection_refs = array();
		// delete any existing collection nodes for this postal code
		$result = db_query("SELECT nid FROM {node} WHERE type = 'trash_collection' AND title = '%s'",
			$node->title);
		while($row = db_fetch_array($result)) {
			node_delete($row['nid']);
		}
		
		// open the raw english schedule
		$rawScheduleEn = file_get_contents($node->field_raw_data[0]['filepath']);
		
		// parse each collection type
	 	foreach($collectionTypes as $collectionType => $typeInfo){
	 		if(preg_match($typeInfo['pattern_en'], $rawScheduleEn, $matches)){
	 			// create a collection node
	 			$colNode = (object) NULL;
				$colNode->type = 'trash_collection';
				$colNode->title = $node->title;
				$colNode->body = $matches[1];
				
				$colNode->field_collection_type[0]['value'] = $collectionType;
				$colNode->field_collection_type_nice[0]['value'] = $typeInfo['title_en'];
				
				$colNode->field_collection_dates = trash_track_parse_dates($matches[1], $collectionType);
				
				$colNode = node_submit($colNode);
				$colNode->uid = 1;
				node_save($colNode);
	 			
	 			$node->field_collection_refs[] = array('nid' => $colNode->nid);
	 		}
	 	}
}

// parse a single schedule collection message
function trash_track_parse_dates($text, $collectionType){
   $months = array(
   	'January',
   	'February',
   	'March',
   	'April',
   	'May',
   	'June',
   	'July',
   	'August',
   	'September',
   	'October',
   	'November',
   	'December');
	$iCalDateMapping = array(
		'SUNDAY' => 'SU',
		'MONDAY' => 'MO',
		'TUESDAY' => 'TU',
		'WEDNESDAY' => 'WE',
		'THURSDAY' => 'TH',
		'FRIDAY' => 'FR',
		'SATURDAY' => 'SA');
	$dates = array();
	
	// if the text contains "on the following", the schedule is only for the dates listed
	if(preg_match('/on\s+the\s+following/', $text)){
		// find each month, and all text up to the next semicolon or period
		foreach($months as $month){
			if(preg_match("/$month(.*?)[\;\.]/is", $text, $matches)){
				// split tokens on spaces
				$tokens = preg_split('/[\s,]+/', $matches[1], -1, PREG_SPLIT_NO_EMPTY);
				if($tokens){
					foreach($tokens as $tok){
						// if the token's a number,  add it as a day of the month
						if(is_numeric($tok)){
							$datetimestamp = strtotime("$month $tok");
							$dates[] = array('value' => date('Y-m-d 00:00:00', $datetimestamp));
						}
						// only other valid token following a month is an 'and'
						else if($tok != 'and'){
							break;
						}
					}
				}
			}  
		}
	}
	
	// otherwise, schedule is for each day of the week listed
	else{
		// get the collection days
		$days = array();
		foreach($iCalDateMapping as $keyword => $iCalDay){
			if(preg_match('/' . $keyword . '/s', $text)){
				$days[] = $iCalDay;
			}
		}
		
		if(!empty($days)){
			// create dates from one month ago to one year from now
			$curTime = time();
			$start = date('Y-m-d', $curTime - (28 * 24 * 60 * 60)) . 'T00:00:00';
			$end = date('Y-m-d', $curTime + (365 * 24 * 60 * 60))  . 'T00:00:00';
			$endICal = date('Ymd', $curTime + (365 * 24 * 60 * 60)) . 'T000000Z';
			
			$iCalRule = 'FREQ=WEEKLY;UNTIL=' . $endICal .
				';WKST=MO;BYDAY=' . implode(',', $days);
			$exceptions = array();
			$rawDates = date_repeat_calc($iCalRule, $start, $end, $exceptions);
		
			// convert dates to cck format
			foreach($rawDates as $date){
				$dates[] = array(
					'value' => $date,
					'rrule' => $iCalRule);
			}
		}
	}
	return $dates;
}

// helper function to retrieve an external webpage using curl
function trash_track_get_page($url, &$cookieJar, $postData = null) {
	 // init curl
	 $ch = curl_init();
	 curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	 curl_setopt($ch, CURLOPT_TIMEOUT, 30);
	 curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	 curl_setopt($ch, CURLOPT_HEADER, 1);
	 curl_setopt($ch, CURLINFO_HEADER_OUT, true);
	 
	 // generate firefox headers so the site can properly detect
	 // this is a compatible browser
	 $header = array();
	 $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
	 $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
	 $header[] = "Cache-Control: max-age=0";
	 $header[] = "Connection: keep-alive";
	 $header[] = "Keep-Alive: 300";
	 $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
	 $header[] = "Pragma: ";
	 $browser = "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3";
	 curl_setopt($ch, CURLOPT_USERAGENT, $browser);
	 curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
	 
	 // create a cookie jar if one does not exist
	 if(!$cookieJar){
	 	$ckfile = tempnam (file_directory_temp(), "trash_track_curl_cookie");
	 	curl_setopt ($ch, CURLOPT_COOKIEJAR, $ckfile);
	 }
	 else {
	 	curl_setopt ($ch, CURLOPT_COOKIEFILE, $ckfile); 
	 }
	 
	 // set post data if provided
	 if($postData){
	 	// compile post data string
		$postStr = '';
		foreach($postData as $key => $val){
	 		$postStr .= $key . '=' . $val . '&';
	 	} 
	 	$postStr = rtrim($postStr, '&');
	 	
	 	curl_setopt($ch, CURLOPT_POST, 1);
	 	curl_setopt($ch, CURLOPT_POSTFIELDS, $postStr);	 	
	 }
	 
	 // retrieve page
	 curl_setopt($ch, CURLOPT_URL, $url);
	 $resultpage = curl_exec($ch);
	 
	 //print "Headers: " . curl_getinfo($ch, CURLINFO_HEADER_OUT);
	 //print "Result:" . $resultpage;
	 curl_close($ch);
	 
	 return $resultpage;
}
